# Databricks notebook source
from pyspark.sql.functions import *
from pyspark.sql.types import *

# COMMAND ----------

print("Hello Amogha")

# COMMAND ----------

df_01 = spark.read.csv("/FileStore/gmde/googleplaystore.csv")

# COMMAND ----------

df_01.show()

# COMMAND ----------

df_01.display()

# COMMAND ----------

df_01.printSchema()

# COMMAND ----------

df_02 = spark.read.option("header",True).csv("/FileStore/gmde/googleplaystore.csv")

# COMMAND ----------

df_02.display()

# COMMAND ----------

df_02.printSchema()

# COMMAND ----------

df_03 = spark.read.df_02 = spark.read.option("header",True).option("inferschema",True).csv("/FileStore/gmde/googleplaystore.csv")

# COMMAND ----------

df_03.display()

# COMMAND ----------

df_03.printSchema()

# COMMAND ----------

sch = StructType().add("App",StringType(),True)\
                .add("Category",StringType(),True)\
                .add("Rating",DoubleType(),True)\
                .add("Reviews",IntegerType(),True)\
                .add("Size",StringType(),True)\
                .add("Installs",StringType(),True)\
                .add("Type",StringType(),True)\
                .add("Price",StringType(),True)\
                .add("Content Rating",StringType(),True)\
                .add("Genres",StringType(),True)\
                .add("Last Updated",StringType(),True)\
                .add("Current Ver",StringType(),True)\
                .add("Android Ver",StringType(),True)

# COMMAND ----------

df_04 = spark.read.df_02 = spark.read.option("header",True).schema(sch).csv("/FileStore/gmde/googleplaystore.csv")

# COMMAND ----------

df_04.display()

# COMMAND ----------

df_04.printSchema()

# COMMAND ----------

with_col_df = df_04.withColumn("RR",concat(col("Rating"),col("Reviews")))

# COMMAND ----------

with_col_df.display()

# COMMAND ----------

with_col_df = with_col_df.withColumn("AppScore",col("Rating"))


# COMMAND ----------

with_col_df.display()

# COMMAND ----------

with_col_df = with_col_df.withColumn("AppDn",concat(col("App"),col("Category")))
with_col_df.display()

# COMMAND ----------

with_col_df = with_col_df.withColumn("Owner",lit("Amogh"))
with_col_df.display()

# COMMAND ----------

with_col_chain = df_04.withColumn("AppDn",concat(col("App"),col("Category"))).withColumn("AppDn",concat(col("App"),col("Category"))).withColumn("Owner",lit("Amogh"))

# COMMAND ----------

with_col_chain.display()

# COMMAND ----------

App_To_AppNamedf = df_04.withColumnRenamed("App","AppName")


# COMMAND ----------

df_04 = df_04.withColumnRenamed("App","AppName")

# COMMAND ----------

df_04.display()

# COMMAND ----------

select_Ex_df = df_04.select("AppName","Rating")

# COMMAND ----------

select_Ex_df.display()

# COMMAND ----------

select_Exp_df = select_Ex_df.selectExpr('cast(Rating As Integer) As new_Rate')

# COMMAND ----------

new_df = df_04.sort(col("Rating"))

# COMMAND ----------

new_df.display()

# COMMAND ----------

df_04.count()

# COMMAND ----------

df_dis = df_04.distinct()

# COMMAND ----------

df_dis.count()

# COMMAND ----------

df_dup = df_04.dropDuplicates(["Category","Rating"])


# COMMAND ----------

df_dup.count()

# COMMAND ----------

switch_Eg_df = df_04.withColumn("Remarks",
                when(col("Rating")>=4.0,"Excellent")
                .when((col("Rating")>=3.0) & (col("rating")<4.0),"Good")
                .otherwise("Not upto the mark")
                )

# COMMAND ----------

switch_Eg_df.display()

# COMMAND ----------

sch1 = StructType().add("App",StringType(),True)\
                .add("Translated_Review",StringType(),True)\
                .add("Sentiment",StringType(),True)\
                .add("Sentiment_Polarity",DoubleType(),True)\
                .add("Sentiment_Subjectivit",DoubleType(),True)

# COMMAND ----------

df_user = spark.read.option("header",True).schema(sch1).csv("/FileStore/gmde/googleplaystore_user_reviews.csv")

# COMMAND ----------

df_user.display()

# COMMAND ----------

df_04.display()

# COMMAND ----------

df_04.withColumnRenamed("AppName","App")

# COMMAND ----------

df_04.display()

# COMMAND ----------

df_user = df_user.withColumnRenamed("App","AppName")

# COMMAND ----------

df_user.display()

# COMMAND ----------

join_eg_df = df_04.join(df_user,df_04.AppName == df_user.AppName,how="inner")

# COMMAND ----------

join_eg_df.display()

# COMMAND ----------

join_eg_chain_df = df_04.join(df_user,df_04.AppName == df_user.AppName,how="inner").select(df_04['*'],df_user['Sentiment'])

# COMMAND ----------

join_eg_chain_df.display()

# COMMAND ----------

grouped_df = join_eg_chain_df.groupBy("AppName").avg("Rating")

# COMMAND ----------

grouped_df.display()
