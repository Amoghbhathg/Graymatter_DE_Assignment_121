{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset161 Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs32\lang9 Python Intermediate Assignment\b0\fs22\par
\b 1. List Comprehensions\par
a. Write a list comprehension that generates a list of squares of the numbers from 1 to 10.\par
Code:\par
\b0 squareNumbers = [x**2 for x in range(1, 11)]\par
print(squareNumbers)\par
\par
\b b. Write a list comprehension to extract all the vowels from the string "hello world".\par
Code:\par
\b0 vowel = [char for char in "hello world" if char in "aeiou"]\par
print(vowel)\par
\par
\b 2. Dictionary Comprehension\par
a. Create a dictionary where the keys are numbers from 1 to 5 and the values are the cubes \par
of the keys.\par
Code:\par
\b0 my_dict = \{a: a**3 for a in range(1, 10)\}\par
print(my_dict)\par
\b b. Create a dictionary where the keys are the \f1\lang1032\u976?irst letters of the words in the list ["apple", \par
"banana", "cherry"] and the values are the words themselves.\par
\f0\lang1033 Code:\par
\b0 words = ["apple", "banana", "cherry"]\par
my_dict = \{word[0]: word for word in words\}\par
print(my_dict)\par
\par
\b 3. Lambda Functions\par
a. Write a lambda function that adds 10 to a given number and use it to add 10 to the \par
number 5.\par
Code:\par
\b0 add_Number= lambda a:a+10\par
add_Five= add_Number(5)\par
print(add_Five)\par
\b b. Write a lambda function that checks if a number is even and use it to test the number 4.\par
Code:\par
\b0 is_Even= lambda a:a%2\par
y= is_Even(4)\par
if y==0:\par
    print("True")\par
else:\par
    print("False")\par
\par
\b 4. Filter Function\par
a. Use the f\f1\lang1032 ilter function to \f0\lang1033 f\f1\lang1032 ilter out the odd numbers from the list [1, 2, 3, 4, 5, 6, 7, 8, 9, \par
10].\par
\f0\lang1033 Code:\par
\b0 my_List = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\par
def oddEven(x):\par
    if x%2==0:\par
        return True\par
    else:\par
        return False\par
        \par
oddNumbers = filter(oddEven,my_List)\par
for x in oddNumbers:\par
    print(x)\par
\b\f1\lang1032\par
b. Use the \f0\lang1033 f\f1\lang1032 ilter function to remove all strings shorter than 4 characters from the list ["cat", \par
"dog", "elephant", "rat"]\par
\f0\lang1033 Code:\par
\b0 my_List = ["cat", "dog", "elephant", "rat"]\par
def LessThanFour(x):\par
    if(len(x)<4):\par
        return False\par
    else:\par
        return True\par
MoreThanFour = filter(LessThanFour,my_List)\par
for x in MoreThanFour:\par
    print(x)\par
\par
\b 5. Map Function\par
a. Use the map function to double all the numbers in the list [1, 2, 3, 4, 5].\par
Code:\par
\b0 my_List = [1, 2, 3, 4, 5]\par
\par
def my_Func(x):\par
    return x*2\par
DoubleNumber = list(map(my_Func,my_List))\par
print(DoubleNumber)\b\par
\par
b. Use the map function to convert a list of integers [1, 2, 3] to their corresponding string \par
representations\par
Code:\par
\b0 my_List = [1, 2, 3]\par
def my_Func(x):\par
    return str(x)\par
my_List_String = list(map(my_Func,my_List))\par
print(my_List_String)\par
\b\par
6. Reduce Function\par
a. Use the reduce function to f\f1\lang1032 ind the product of the numbers in the list [1, 2, 3, 4, 5].\par
\f0\lang1033 Code:\par
\b0 import functools\par
my_List = [1, 2,3,4,5]\par
my_func = lambda x,y:x*y\par
ProductOfList = functools.reduce(my_func,my_List)\par
print(ProductOfList)\par
\b\f1\lang1032\par
b. Use the reduce function to concatenate a list of strings ["Hello", "World", "from", \par
"Python"] into a single string.\par
\f0\lang1033 Code:\par
\b0 import functools\par
my_List = ["Hello", "World", "from", "Python"] \par
my_func = lambda x,y:x+" "+y\par
StringConcatenate = functools.reduce(my_func,my_List)\par
print(ProductOfList)\par
\par
\b 7. Generator Functions\par
a. Create a generator function that yields the f\f1\lang1032 irst 5 even numbers.\par
\f0\lang1033 Code:\par
\f1\lang1032 def FirstFiveEven():\par
    \b0 num=0\par
    count = 0\par
\b   \f0\lang1033   \b0\f1\lang1032 while count<5:\par
        if num%2==0:\par
            count+=1\par
            yield num\par
        num+=1\par
EvenNum = list(FirstFiveEven())\par
print(EvenNum)\par
\b b. Create a generator function that yields numbers in the Fibonacci sequence up to the \par
10th number.\par
\f0\lang1033 Code:\par
\b0 def Fibonacci():\par
    x, y = 0, 1\par
    count = 0\par
    while count < 10:\par
        yield x\par
        x, y = y, x + y\par
        count += 1\par
\par
fibonacciTen = list(Fibonacci())\par
print(fibonacciTen)\par
\par
\b 8. Handling Exceptions\par
a. Write a function that takes two numbers and returns their division, handling the division \par
by zero exception.\par
Code:\par
\b0 def divideNum(x, y):\par
    try:\par
        res = x / y\par
    except ZeroDivisionError:\par
        res = float('inf')  \par
    return res\par
    \par
x = divideNum(10,5)\par
print(x)\par
\b b. Write a function that reads a f\f1\lang1032 ile and handles the \f0\lang1033 f\f1\lang1032 ile not found exception.\par
\f0\lang1033 Code:\par
\b0 def read_file(filename):\par
    try:\par
        with open(filename, 'r') as file:\par
            content = file.read()\par
    except FileNotFoundError:\par
        content = "File not found"\par
    return content\par
\par
\b 9. File I/O\par
a. Write a program that writes the string "Hello, World!" to a \f1\lang1032\u976?ile and then reads it back.\par
\f0\lang1033 Code:\par
\b0 with open('hello.txt', 'w') as file:\par
    file.write("Hello, World!")\par
\par
with open('hello.txt', 'r') as file:\par
    content = file.read()\par
\par
print(content)\par
\par
\b\f1\lang1032 b. Write a program that appends the string "Goodbye!" to an existing \u976?ile and then reads \par
and prints the \f0\lang1033 f\f1\lang1032 ile content\par
\b0\f0\lang1033 with open('hello.txt', 'a') as file:\par
    file.write("\\nGoodbye!")\par
\par
with open('hello.txt', 'r') as file:\par
    content = file.read()\par
\par
print(content)\b\f1\lang1032\par
\f0\lang1033\par
\b0\par
\b 10. Regular Expressions\par
a. Use regular expressions to f\f1\lang1032 ind all the words starting with 'a' in the string "apple and \par
banana are amazing".\par
\f0\lang1033 Code:\par
\b0 import re\par
word = "apple and banana are amazing"\par
pattern = r'\\b[aA]\\w+'\par
StartWithA = re.findall(pattern,word)\par
print(StartWithA)\par
\b\f1\lang1032\par
b. Use regular expressions to extract all the email addresses from the string "contact us at \par
email@example.com or admin@site.org".\par
\f0\lang1033 Code:\par
\b0 import re\par
word = "contact us at email@example.com or admin@site.org"\par
pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]\{2,\}\\b'\par
WordWithEmail = re.findall(pattern,word)\par
print(WordWithEmail)\par
\par
\b 11. Classes and Objects\par
a. Create a class Person with attributes name and age. Instantiate an object of this class and \par
print its attributes.\par
Code:\par
\b0 class Person:\par
    def __init__(self, name, age,salary):\par
        self.name = name\par
        self.age = age\par
        self.salary = salary\par
person1 = Person("Amogh", 22,40000)\par
name = person1.name\par
print("Person's name:"+name)\par
print(f"Person's age: \{person1.age\}")\par
print(f"Person's salary: \{person1.salary\}")\b\par
\par
b. Create a class Car with attributes make, model, and year. Instantiate an object of this \par
class and print its attributes.\par
Code:\par
\b0 class Car:\par
    def __init__(self, make, model, year):\par
        self.make = make\par
        self.model = model\par
        self.year = year\par
\par
car1 = Car("Toyota", "Camry", 2022)\par
print(f"Car's make: \{car1.make\}")\par
print(f"Car's model: \{car1.model\}")\par
print(f"Car's year: \{car1.year\}")\par
\par
\b 12. Inheritance\par
a. Create a class Employee that inherits from the Person class and adds an attribute salary. \par
Instantiate an object of Employee and print all its attributes.\par
Code:\par
\b0 class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age\par
\par
class Employee(Person):\par
    def __init__(self, name, age, salary):\par
        \par
        super().__init__(name, age)\par
        self.salary = salary\par
\par
employee1 = Employee("John Doe", 35, 50000)\par
\par
print(f"Employee's name: \{employee1.name\}")\par
print(f"Employee's age: \{employee1.age\}")\par
print(f"Employee's salary: $\{employee1.salary\}")\par
\b\par
b. Create a class Manager that inherits from Employee and adds an attribute department. \par
Instantiate an object of Manager and print all its attributes.\par
Code:\par
\b0 class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age\par
\par
class Employee(Person):\par
    def __init__(self, name, age, salary):\par
        \par
        super().__init__(name, age)\par
        self.salary = salary\par
        \par
class Manager(Employee):\par
    def __init__(self, name, age, salary, department):\par
        \par
        super().__init__(name, age, salary)\par
        self.department = department\par
\par
manager1 = Manager("Jane Smith", 40, 80000, "Sales")\par
\par
print(f"Manager's name: \{manager1.name\}")\par
print(f"Manager's age: \{manager1.age\}")\par
print(f"Manager's salary: $\{manager1.salary\}")\par
print(f"Manager's department: \{manager1.department\}")\par
\par
\b 13. Static Methods\par
a. Add a static method to the Person class that returns a greeting message.\par
Code:\par
\b0 class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age\par
    \par
 @staticmethod\par
    def greet():\par
        return "Hello! Have a nice day."\par
person1 = Person("Amogh", 22)\par
print(Person.greet()) \par
\par
\b b. Add a static method to the MathUtils class that returns the square of a given number.\par
Code:\par
\b0 class MathUtils:\par
    @staticmethod\par
    def square(x):\par
        return x * x\par
\par
res = MathUtils.square(5)\par
print(f"Square of 5 is: \{res\}")  \par
\par
\b 14. Class Methods\par
a. Add a class method to the Person class that returns a new instance of Person with a \par
default name and age.\par
Code:\par
\b0 class Person:\par
    default_name = "Anonymous"\par
    default_age = 0\par
    \par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age\par
    \par
    @classmethod\par
    def create_default(cls):\par
        return cls(cls.default_name, cls.default_age)\par
\par
person_default = Person.create_default()\par
print(f"Default Person's name: \{person_default.name\}")  \par
print(f"Default Person's age: \{person_default.age\}")    \par
\b\par
\par
b. Add a class method to the Book class that creates a new Book instance from a given title \par
and author\par
Code:\par
\b0 class Book:\par
    def __init__(self, title, author):\par
        self.title = title\par
        self.author = author\par
    \par
    @classmethod\par
    def create(cls, title, author):\par
        return cls(title, author)\par
\par
book1 = Book.create("Harry Potter", "J.K. Rowling")\par
\par
print(f"Book title: \{book1.title\}")    \par
print(f"Book author: \{book1.author\}")  \par
\par
\b 15. Magic Methods\par
a. Override the __str__ method in the Person class to return a formatted string.\par
Code:\par
class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age\par
    \par
    def __str__(self):\par
        return f"Person: \{self.name\}, Age: \{self.age\}"\par
\par
person1 = Person("Amogh", 30)\par
print(person1)  \par
\par
b. Override the __add__ method in a Vector class to add two vectors together\par
Code:\par
\b0 class Vector:\par
    def __init__(self, x, y):\par
        self.x = x\par
        self.y = y\par
    \par
     def __add__(self, other):\par
        if isinstance(other, Vector):\par
            return Vector(self.x + other.x, self.y + other.y)\par
        else:\par
            raise TypeError("Unsupported operand type(s) for +: 'Vector' and '\{\}'".format(type(other)))\par
vector1 = Vector(3, 4)\par
vector2 = Vector(1, 2)\par
result_vector = vector1 + vector2\par
\par
print(f"Resulting Vector: (\{result_vector.x\}, \{result_vector.y\})")  \par
\par
\b 16. Context Managers\par
a. Create a context manager that prints "Entering" when entering the context and "Exiting" \par
when exiting the context.\par
Code:\par
\b0 class MyContextManager:\par
    def __enter__(self):\par
        print("Entering")\par
    \par
    def __exit__(self, exc_type, exc_val, exc_tb):\par
        print("Exiting")\par
\par
with MyContextManager():\par
    print("Inside the context")\b\par
b. Create a context manager that temporarily changes the current working directory and \par
restores it back when exiting the context.\par
Code:\par
\b0 import os\par
class ChangeDirContext:\par
    def __init__(self, new_dir):\par
        self.new_dir = new_dir\par
        self.saved_dir = None\par
\par
    def __enter__(self):\par
        self.saved_dir = os.getcwd()\par
        os.chdir(self.new_dir)\par
    \par
    def __exit__(self, exc_type, exc_val, exc_tb):\par
        os.chdir(self.saved_dir)\par
\par
\par
with ChangeDirContext('/tmp'):\par
    print("Current directory:", os.getcwd())\par
\par
\par
print("Current directory (after context):", os.getcwd())\par
\par
\b 17. Iterators\par
a. Create a custom iterator that returns numbers from 1 to 5.\par
Code:\par
\b0 class NumIterator:\par
    def __init__(self):\par
        self.current = 0\par
def __iter__(self):\par
        return self\par
def __next__(self):\par
        self.current += 1\par
        if self.current > 5:\par
            raise StopIteration\par
        return self.current\par
\par
numbers = NumIterator()\par
for num in numbers:\par
    print(num)\b\par
\par
b. Create a custom iterator that returns the characters in a string one by one.\par
Code:\par
\par
\b0 class StringIterator:\par
    def __init__(self, text):\par
        self.text = text\par
        self.index = 0\par
\par
    def __iter__(self):\par
        return self\par
\par
    def __next__(self):\par
        if self.index >= len(self.text):\par
            raise StopIteration\par
        result = self.text[self.index]\par
        self.index += 1\par
        return result\par
\par
text_iter = StringIterator("Hello")\par
for char in text_iter:\par
    print(char)\par
\b\par
18. Modules and Packages\par
a. Create a simple module my_module.py with a function greet that prints "Hello, World!". \par
Import and use this function in another script.\par
Code:\par
\b0 # File: my_module.py\par
def greeting():\par
    print("Hello, World!")\par
# Usage in another file:\par
from my_module import greeting\par
 greet()\par
\b\par
b. Create a package my_package with a module utils.py that contains a function square that \par
returns the square of a number. Import and use this function in another script.\par
Code:\par
\b0 # File: my_package/utils.py\par
def square(a):\par
    return a** 2\par
# Usage in another script:\par
from my_package.utils import square\par
res = square(5)\par
 print(res)\par
\b\par
19. Date and Time\par
a. Write a program that gets the current date and time and prints it in the format "YYYY\'02MM-DD HH:MM".\par
Code:\par
\b0 from datetime import datetime\par
nowTime = datetime.now()\par
format_datetime = nowTime.strftime("%Y%m-%d %H:%M")\par
print(format_datetime)\b\par
b. Write a program that calculates the number of days between two given dates.\par
Code:\par
\b0 from datetime import datetime\par
date_1 = "2023-01-01"\par
date_2 = "2023-12-31"\par
\par
d1 = datetime.strptime(date_1, "%Y-%m-%d")\par
d2 = datetime.strptime(date_2, "%Y-%m-%d")\par
\par
diff = d2 - d1\par
print(diff.days)\par
\b 20. Collections\par
a. Use the collections.Counter class to count the occurrences of each character in the string \par
"abracadabra".\par
Code:\par
\b0 from collections import Counter\par
txt = "abracadabra"\par
characterCount = Counter(txt)\par
print(characterCount)\par
\b b. Use the collections.defaultdict class to create a dictionary that returns a default value of \par
0 for any new keys\par
Code:\par
\b0 from collections import defaultdict\par
defDictionary = defaultdict(int)\par
defDictionary['a'] = 1\par
print(defDictionary['a'])  \par
print(defDictionary['b'])\b\par
\par
\f1\lang1032\par
\f0\lang1033\par
\b0\par
\lang9\par
}
 