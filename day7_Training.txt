Python Intermediate Assignment
1. List Comprehensions
a. Write a list comprehension that generates a list of squares of the numbers from 1 to 10.
Code:
squareNumbers = [x**2 for x in range(1, 11)]
print(squareNumbers)

b. Write a list comprehension to extract all the vowels from the string "hello world".
Code:
vowel = [char for char in "hello world" if char in "aeiou"]
print(vowel)

2. Dictionary Comprehension
a. Create a dictionary where the keys are numbers from 1 to 5 and the values are the cubes 
of the keys.
Code:
my_dict = {a: a**3 for a in range(1, 10)}
print(my_dict)
b. Create a dictionary where the keys are the ϐirst letters of the words in the list ["apple", 
"banana", "cherry"] and the values are the words themselves.
Code:
words = ["apple", "banana", "cherry"]
my_dict = {word[0]: word for word in words}
print(my_dict)

3. Lambda Functions
a. Write a lambda function that adds 10 to a given number and use it to add 10 to the 
number 5.
Code:
add_Number= lambda a:a+10
add_Five= add_Number(5)
print(add_Five)
b. Write a lambda function that checks if a number is even and use it to test the number 4.
Code:
is_Even= lambda a:a%2
y= is_Even(4)
if y==0:
    print("True")
else:
    print("False")

4. Filter Function
a. Use the filter function to filter out the odd numbers from the list [1, 2, 3, 4, 5, 6, 7, 8, 9, 
10].
Code:
my_List = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
def oddEven(x):
    if x%2==0:
        return True
    else:
        return False
        
oddNumbers = filter(oddEven,my_List)
for x in oddNumbers:
    print(x)

b. Use the filter function to remove all strings shorter than 4 characters from the list ["cat", 
"dog", "elephant", "rat"]
Code:
my_List = ["cat", "dog", "elephant", "rat"]
def LessThanFour(x):
    if(len(x)<4):
        return False
    else:
        return True
MoreThanFour = filter(LessThanFour,my_List)
for x in MoreThanFour:
    print(x)

5. Map Function
a. Use the map function to double all the numbers in the list [1, 2, 3, 4, 5].
Code:
my_List = [1, 2, 3, 4, 5]

def my_Func(x):
    return x*2
DoubleNumber = list(map(my_Func,my_List))
print(DoubleNumber)

b. Use the map function to convert a list of integers [1, 2, 3] to their corresponding string 
representations
Code:
my_List = [1, 2, 3]
def my_Func(x):
    return str(x)
my_List_String = list(map(my_Func,my_List))
print(my_List_String)

6. Reduce Function
a. Use the reduce function to find the product of the numbers in the list [1, 2, 3, 4, 5].
Code:
import functools
my_List = [1, 2,3,4,5]
my_func = lambda x,y:x*y
ProductOfList = functools.reduce(my_func,my_List)
print(ProductOfList)

b. Use the reduce function to concatenate a list of strings ["Hello", "World", "from", 
"Python"] into a single string.
Code:
import functools
my_List = ["Hello", "World", "from", "Python"] 
my_func = lambda x,y:x+" "+y
StringConcatenate = functools.reduce(my_func,my_List)
print(ProductOfList)

7. Generator Functions
a. Create a generator function that yields the first 5 even numbers.
Code:
def FirstFiveEven():
    num=0
    count = 0
    while count<5:
        if num%2==0:
            count+=1
            yield num
        num+=1
EvenNum = list(FirstFiveEven())
print(EvenNum)
b. Create a generator function that yields numbers in the Fibonacci sequence up to the 
10th number.
Code:
def Fibonacci():
    x, y = 0, 1
    count = 0
    while count < 10:
        yield x
        x, y = y, x + y
        count += 1

fibonacciTen = list(Fibonacci())
print(fibonacciTen)

8. Handling Exceptions
a. Write a function that takes two numbers and returns their division, handling the division 
by zero exception.
Code:
def divideNum(x, y):
    try:
        res = x / y
    except ZeroDivisionError:
        res = float('inf')  
    return res
    
x = divideNum(10,5)
print(x)
b. Write a function that reads a file and handles the file not found exception.
Code:
def read_file(filename):
    try:
        with open(filename, 'r') as file:
            content = file.read()
    except FileNotFoundError:
        content = "File not found"
    return content

9. File I/O
a. Write a program that writes the string "Hello, World!" to a ϐile and then reads it back.
Code:
with open('hello.txt', 'w') as file:
    file.write("Hello, World!")

with open('hello.txt', 'r') as file:
    content = file.read()

print(content)

b. Write a program that appends the string "Goodbye!" to an existing ϐile and then reads 
and prints the file content
with open('hello.txt', 'a') as file:
    file.write("\nGoodbye!")

with open('hello.txt', 'r') as file:
    content = file.read()

print(content)


10. Regular Expressions
a. Use regular expressions to find all the words starting with 'a' in the string "apple and 
banana are amazing".
Code:
import re
word = "apple and banana are amazing"
pattern = r'\b[aA]\w+'
StartWithA = re.findall(pattern,word)
print(StartWithA)

b. Use regular expressions to extract all the email addresses from the string "contact us at 
email@example.com or admin@site.org".
Code:
import re
word = "contact us at email@example.com or admin@site.org"
pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
WordWithEmail = re.findall(pattern,word)
print(WordWithEmail)

11. Classes and Objects
a. Create a class Person with attributes name and age. Instantiate an object of this class and 
print its attributes.
Code:
class Person:
    def __init__(self, name, age,salary):
        self.name = name
        self.age = age
        self.salary = salary
person1 = Person("Amogh", 22,40000)
name = person1.name
print("Person's name:"+name)
print(f"Person's age: {person1.age}")
print(f"Person's salary: {person1.salary}")

b. Create a class Car with attributes make, model, and year. Instantiate an object of this 
class and print its attributes.
Code:
class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year

car1 = Car("Toyota", "Camry", 2022)
print(f"Car's make: {car1.make}")
print(f"Car's model: {car1.model}")
print(f"Car's year: {car1.year}")

12. Inheritance
a. Create a class Employee that inherits from the Person class and adds an attribute salary. 
Instantiate an object of Employee and print all its attributes.
Code:
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

class Employee(Person):
    def __init__(self, name, age, salary):
        
        super().__init__(name, age)
        self.salary = salary

employee1 = Employee("John Doe", 35, 50000)

print(f"Employee's name: {employee1.name}")
print(f"Employee's age: {employee1.age}")
print(f"Employee's salary: ${employee1.salary}")

b. Create a class Manager that inherits from Employee and adds an attribute department. 
Instantiate an object of Manager and print all its attributes.
Code:
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

class Employee(Person):
    def __init__(self, name, age, salary):
        
        super().__init__(name, age)
        self.salary = salary
        
class Manager(Employee):
    def __init__(self, name, age, salary, department):
        
        super().__init__(name, age, salary)
        self.department = department

manager1 = Manager("Jane Smith", 40, 80000, "Sales")

print(f"Manager's name: {manager1.name}")
print(f"Manager's age: {manager1.age}")
print(f"Manager's salary: ${manager1.salary}")
print(f"Manager's department: {manager1.department}")

13. Static Methods
a. Add a static method to the Person class that returns a greeting message.
Code:
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
 @staticmethod
    def greet():
        return "Hello! Have a nice day."
person1 = Person("Amogh", 22)
print(Person.greet()) 

b. Add a static method to the MathUtils class that returns the square of a given number.
Code:
class MathUtils:
    @staticmethod
    def square(x):
        return x * x

res = MathUtils.square(5)
print(f"Square of 5 is: {res}")  

14. Class Methods
a. Add a class method to the Person class that returns a new instance of Person with a 
default name and age.
Code:
class Person:
    default_name = "Anonymous"
    default_age = 0
    
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    @classmethod
    def create_default(cls):
        return cls(cls.default_name, cls.default_age)

person_default = Person.create_default()
print(f"Default Person's name: {person_default.name}")  
print(f"Default Person's age: {person_default.age}")    


b. Add a class method to the Book class that creates a new Book instance from a given title 
and author
Code:
class Book:
    def __init__(self, title, author):
        self.title = title
        self.author = author
    
    @classmethod
    def create(cls, title, author):
        return cls(title, author)

book1 = Book.create("Harry Potter", "J.K. Rowling")

print(f"Book title: {book1.title}")    
print(f"Book author: {book1.author}")  

15. Magic Methods
a. Override the __str__ method in the Person class to return a formatted string.
Code:
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def __str__(self):
        return f"Person: {self.name}, Age: {self.age}"

person1 = Person("Amogh", 30)
print(person1)  

b. Override the __add__ method in a Vector class to add two vectors together
Code:
class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
     def __add__(self, other):
        if isinstance(other, Vector):
            return Vector(self.x + other.x, self.y + other.y)
        else:
            raise TypeError("Unsupported operand type(s) for +: 'Vector' and '{}'".format(type(other)))
vector1 = Vector(3, 4)
vector2 = Vector(1, 2)
result_vector = vector1 + vector2

print(f"Resulting Vector: ({result_vector.x}, {result_vector.y})")  

16. Context Managers
a. Create a context manager that prints "Entering" when entering the context and "Exiting" 
when exiting the context.
Code:
class MyContextManager:
    def __enter__(self):
        print("Entering")
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        print("Exiting")

with MyContextManager():
    print("Inside the context")
b. Create a context manager that temporarily changes the current working directory and 
restores it back when exiting the context.
Code:
import os
class ChangeDirContext:
    def __init__(self, new_dir):
        self.new_dir = new_dir
        self.saved_dir = None

    def __enter__(self):
        self.saved_dir = os.getcwd()
        os.chdir(self.new_dir)
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        os.chdir(self.saved_dir)


with ChangeDirContext('/tmp'):
    print("Current directory:", os.getcwd())


print("Current directory (after context):", os.getcwd())

17. Iterators
a. Create a custom iterator that returns numbers from 1 to 5.
Code:
class NumIterator:
    def __init__(self):
        self.current = 0
def __iter__(self):
        return self
def __next__(self):
        self.current += 1
        if self.current > 5:
            raise StopIteration
        return self.current

numbers = NumIterator()
for num in numbers:
    print(num)

b. Create a custom iterator that returns the characters in a string one by one.
Code:

class StringIterator:
    def __init__(self, text):
        self.text = text
        self.index = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.index >= len(self.text):
            raise StopIteration
        result = self.text[self.index]
        self.index += 1
        return result

text_iter = StringIterator("Hello")
for char in text_iter:
    print(char)

18. Modules and Packages
a. Create a simple module my_module.py with a function greet that prints "Hello, World!". 
Import and use this function in another script.
Code:
# File: my_module.py
def greeting():
    print("Hello, World!")
# Usage in another file:
from my_module import greeting
 greet()

b. Create a package my_package with a module utils.py that contains a function square that 
returns the square of a number. Import and use this function in another script.
Code:
# File: my_package/utils.py
def square(a):
    return a** 2
# Usage in another script:
from my_package.utils import square
res = square(5)
 print(res)

19. Date and Time
a. Write a program that gets the current date and time and prints it in the format "YYYYMM-DD HH:MM".
Code:
from datetime import datetime
nowTime = datetime.now()
format_datetime = nowTime.strftime("%Y%m-%d %H:%M")
print(format_datetime)
b. Write a program that calculates the number of days between two given dates.
Code:
from datetime import datetime
date_1 = "2023-01-01"
date_2 = "2023-12-31"

d1 = datetime.strptime(date_1, "%Y-%m-%d")
d2 = datetime.strptime(date_2, "%Y-%m-%d")

diff = d2 - d1
print(diff.days)
20. Collections
a. Use the collections.Counter class to count the occurrences of each character in the string 
"abracadabra".
Code:
from collections import Counter
txt = "abracadabra"
characterCount = Counter(txt)
print(characterCount)
b. Use the collections.defaultdict class to create a dictionary that returns a default value of 
0 for any new keys
Code:
from collections import defaultdict
defDictionary = defaultdict(int)
defDictionary['a'] = 1
print(defDictionary['a'])  
print(defDictionary['b'])




